// <auto-generated />
using System;
using AlgoTrader.Infrastructure.EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AlgoTrader.Infrastructure.EntityFramework.Migrations
{
    [DbContext(typeof(AlgoTraderDbContext))]
    [Migration("20250704180754_AddLadderBot")]
    partial class AddLadderBot
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "bar_interval", new[] { "one_minute", "five_minutes", "one_hour", "one_day" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "market_type", new[] { "spot", "futures" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AlgoTrader.Core.Entities.Bar", b =>
                {
                    b.Property<Guid>("TickerId")
                        .HasColumnType("uuid")
                        .HasColumnName("ticker_id");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date");

                    b.Property<string>("Interval")
                        .HasColumnType("text")
                        .HasColumnName("interval");

                    b.Property<decimal>("Close")
                        .HasColumnType("numeric")
                        .HasColumnName("close");

                    b.Property<decimal>("High")
                        .HasColumnType("numeric")
                        .HasColumnName("high");

                    b.Property<decimal>("Low")
                        .HasColumnType("numeric")
                        .HasColumnName("low");

                    b.Property<decimal>("Open")
                        .HasColumnType("numeric")
                        .HasColumnName("open");

                    b.Property<decimal>("Volume")
                        .HasColumnType("numeric")
                        .HasColumnName("volume");

                    b.HasKey("TickerId", "Date", "Interval");

                    b.HasIndex("Date")
                        .IsDescending()
                        .HasDatabaseName("idx_bar_date");

                    b.HasIndex("TickerId", "Interval", "Date")
                        .IsDescending()
                        .HasDatabaseName("idx_bar_symbol_interval_date");

                    b.ToTable("bars", (string)null);
                });

            modelBuilder.Entity("AlgoTrader.Core.Entities.Bots.LadderBot", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at");

                    b.Property<Guid>("TickerId")
                        .HasColumnType("uuid")
                        .HasColumnName("ticker_id");

                    b.Property<long>("Version")
                        .HasColumnType("bigint")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("TickerId");

                    b.ToTable("ladder_bots", (string)null);
                });

            modelBuilder.Entity("AlgoTrader.Core.Entities.Orders.HistoryOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("BotId")
                        .HasColumnType("uuid")
                        .HasColumnName("bot_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Direction")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("direction");

                    b.Property<DateTime?>("ExchangeCreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("exchange_created_at");

                    b.Property<decimal?>("ExchangeFunds")
                        .HasColumnType("numeric")
                        .HasColumnName("exchange_funds");

                    b.Property<DateTime?>("ExchangeModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("exchange_modified_at");

                    b.Property<string>("ExchangeOrderId")
                        .HasColumnType("text")
                        .HasColumnName("exchange_order_id");

                    b.Property<decimal?>("ExchangeQuantity")
                        .HasColumnType("numeric")
                        .HasColumnName("exchange_quantity");

                    b.Property<decimal>("FeePercentage")
                        .HasColumnType("numeric")
                        .HasColumnName("fee_percentage");

                    b.Property<decimal?>("InitialLimitPricePerAsset")
                        .HasColumnType("numeric")
                        .HasColumnName("initial_limit_price_per_asset");

                    b.Property<decimal?>("InitialLimitQuantity")
                        .HasColumnType("numeric")
                        .HasColumnName("initial_limit_quantity");

                    b.Property<decimal?>("InitialMarketFunds")
                        .HasColumnType("numeric")
                        .HasColumnName("initial_market_funds");

                    b.Property<decimal?>("InitialMarketQuantity")
                        .HasColumnType("numeric")
                        .HasColumnName("initial_market_quantity");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<string>("Ticker")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ticker");

                    b.Property<Guid>("TradeId")
                        .HasColumnType("uuid")
                        .HasColumnName("trade_id");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.ToTable("history_orders", (string)null);
                });

            modelBuilder.Entity("AlgoTrader.Core.Entities.Orders.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("BotId")
                        .HasColumnType("uuid")
                        .HasColumnName("bot_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<string>("Direction")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("direction");

                    b.Property<decimal>("FeePercentage")
                        .HasColumnType("numeric")
                        .HasColumnName("fee_percentage");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.HasIndex("BotId");

                    b.ToTable("orders", (string)null);
                });

            modelBuilder.Entity("AlgoTrader.Core.Entities.Ticker", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("MarketType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("market_type");

                    b.Property<DateTime>("TickerStartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ticker_start_date");

                    b.HasKey("Id");

                    b.ToTable("tickers", (string)null);
                });

            modelBuilder.Entity("AlgoTrader.Core.Entities.Bar", b =>
                {
                    b.HasOne("AlgoTrader.Core.Entities.Ticker", "Ticker")
                        .WithMany()
                        .HasForeignKey("TickerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ticker");
                });

            modelBuilder.Entity("AlgoTrader.Core.Entities.Bots.LadderBot", b =>
                {
                    b.HasOne("AlgoTrader.Core.Entities.Ticker", "Ticker")
                        .WithMany()
                        .HasForeignKey("TickerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("AlgoTrader.Core.ValueObjects.Bots.LadderBotSettings", "Settings", b1 =>
                        {
                            b1.Property<Guid>("LadderBotId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("FallPercentage")
                                .HasColumnType("numeric")
                                .HasColumnName("settings_fall_percent");

                            b1.Property<decimal>("LimitDeposit")
                                .HasColumnType("numeric")
                                .HasColumnName("settings_limit_deposit");

                            b1.Property<decimal>("LimitPerOrder")
                                .HasColumnType("numeric")
                                .HasColumnName("settings_limit_per_order");

                            b1.Property<decimal>("Maker")
                                .HasColumnType("numeric")
                                .HasColumnName("settings_maker_fee");

                            b1.Property<decimal>("ProfitPercentage")
                                .HasColumnType("numeric")
                                .HasColumnName("settings_profit_percent");

                            b1.Property<bool>("ReinvestmentProfits")
                                .HasColumnType("boolean")
                                .HasColumnName("reinvestment_profits");

                            b1.Property<decimal>("Taker")
                                .HasColumnType("numeric")
                                .HasColumnName("settings_taker_fee");

                            b1.Property<decimal>("TotalIncome")
                                .HasColumnType("numeric")
                                .HasColumnName("total_income");

                            b1.HasKey("LadderBotId");

                            b1.ToTable("ladder_bots");

                            b1.WithOwner()
                                .HasForeignKey("LadderBotId");
                        });

                    b.Navigation("Settings")
                        .IsRequired();

                    b.Navigation("Ticker");
                });

            modelBuilder.Entity("AlgoTrader.Core.Entities.Orders.Order", b =>
                {
                    b.HasOne("AlgoTrader.Core.Entities.Bots.LadderBot", null)
                        .WithMany("Orders")
                        .HasForeignKey("BotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("AlgoTrader.Core.ValueObjects.Orders.ExchangeData", "ExchangeData", b1 =>
                        {
                            b1.Property<Guid>("OrderId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime?>("CreatedAt")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("exchange_order_created");

                            b1.Property<string>("ExchangeOrderId")
                                .HasColumnType("text")
                                .HasColumnName("exchange_order_id");

                            b1.Property<decimal>("Funds")
                                .HasColumnType("numeric")
                                .HasColumnName("exchange_funds");

                            b1.Property<DateTime?>("ModifiedAt")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("exchange_order_modified");

                            b1.Property<decimal>("Quantity")
                                .HasColumnType("numeric")
                                .HasColumnName("exchange_quantity");

                            b1.HasKey("OrderId");

                            b1.ToTable("orders");

                            b1.WithOwner()
                                .HasForeignKey("OrderId");
                        });

                    b.OwnsOne("AlgoTrader.Core.ValueObjects.Orders.InitialOrderData", "InitialData", b1 =>
                        {
                            b1.Property<Guid>("OrderId")
                                .HasColumnType("uuid");

                            b1.Property<decimal?>("LimitPricePerAsset")
                                .HasColumnType("numeric")
                                .HasColumnName("initial_order_limit_price_per_asset");

                            b1.Property<decimal?>("LimitQuantity")
                                .HasColumnType("numeric")
                                .HasColumnName("initial_order_limit_quantity");

                            b1.Property<decimal?>("MarketFunds")
                                .HasColumnType("numeric")
                                .HasColumnName("initial_order_market_funds");

                            b1.Property<decimal?>("MarketQuantity")
                                .HasColumnType("numeric")
                                .HasColumnName("initial_order_market_quantity");

                            b1.HasKey("OrderId");

                            b1.ToTable("orders");

                            b1.WithOwner()
                                .HasForeignKey("OrderId");
                        });

                    b.Navigation("ExchangeData");

                    b.Navigation("InitialData")
                        .IsRequired();
                });

            modelBuilder.Entity("AlgoTrader.Core.Entities.Ticker", b =>
                {
                    b.OwnsOne("AlgoTrader.Core.ValueObjects.Symbol", "Symbol", b1 =>
                        {
                            b1.Property<Guid>("TickerId")
                                .HasColumnType("uuid");

                            b1.Property<string>("SymbolLeft")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("ticker_left");

                            b1.Property<string>("SymbolRight")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("ticker_right");

                            b1.HasKey("TickerId");

                            b1.ToTable("tickers");

                            b1.WithOwner()
                                .HasForeignKey("TickerId");
                        });

                    b.Navigation("Symbol")
                        .IsRequired();
                });

            modelBuilder.Entity("AlgoTrader.Core.Entities.Bots.LadderBot", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
