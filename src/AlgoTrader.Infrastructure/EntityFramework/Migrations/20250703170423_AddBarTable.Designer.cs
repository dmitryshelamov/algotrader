// <auto-generated />
using System;
using AlgoTrader.Infrastructure.EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AlgoTrader.Infrastructure.EntityFramework.Migrations
{
    [DbContext(typeof(AlgoTraderDbContext))]
    [Migration("20250703170423_AddBarTable")]
    partial class AddBarTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "bar_interval", new[] { "one_minute", "five_minutes", "one_hour", "one_day" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "market_type", new[] { "spot", "futures" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AlgoTrader.Core.Entites.Bar", b =>
                {
                    b.Property<Guid>("TickerId")
                        .HasColumnType("uuid")
                        .HasColumnName("ticker_id");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date");

                    b.Property<decimal>("Close")
                        .HasColumnType("numeric")
                        .HasColumnName("close");

                    b.Property<decimal>("High")
                        .HasColumnType("numeric")
                        .HasColumnName("high");

                    b.Property<string>("Interval")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("interval");

                    b.Property<decimal>("Low")
                        .HasColumnType("numeric")
                        .HasColumnName("low");

                    b.Property<decimal>("Open")
                        .HasColumnType("numeric")
                        .HasColumnName("open");

                    b.Property<decimal>("Volume")
                        .HasColumnType("numeric")
                        .HasColumnName("volume");

                    b.HasKey("TickerId", "Date");

                    b.HasIndex("Date")
                        .IsDescending()
                        .HasDatabaseName("idx_bar_date");

                    b.HasIndex("TickerId", "Interval", "Date")
                        .IsDescending()
                        .HasDatabaseName("idx_bar_symbol_interval_date");

                    b.ToTable("bars", (string)null);
                });

            modelBuilder.Entity("AlgoTrader.Core.Entites.Ticker", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("MarketType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("market_type");

                    b.Property<DateTime>("TickerStartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ticker_start_date");

                    b.HasKey("Id");

                    b.ToTable("tickers", (string)null);
                });

            modelBuilder.Entity("AlgoTrader.Core.Entites.Bar", b =>
                {
                    b.HasOne("AlgoTrader.Core.Entites.Ticker", "Ticker")
                        .WithMany()
                        .HasForeignKey("TickerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ticker");
                });

            modelBuilder.Entity("AlgoTrader.Core.Entites.Ticker", b =>
                {
                    b.OwnsOne("AlgoTrader.Core.ValueObjects.Symbol", "Symbol", b1 =>
                        {
                            b1.Property<Guid>("TickerId")
                                .HasColumnType("uuid");

                            b1.Property<string>("SymbolLeft")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("ticker_left");

                            b1.Property<string>("SymbolRight")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("ticker_right");

                            b1.HasKey("TickerId");

                            b1.ToTable("tickers");

                            b1.WithOwner()
                                .HasForeignKey("TickerId");
                        });

                    b.Navigation("Symbol")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
