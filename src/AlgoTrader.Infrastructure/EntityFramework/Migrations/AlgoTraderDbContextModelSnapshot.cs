// <auto-generated />
using System;
using AlgoTrader.Infrastructure.EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AlgoTrader.Infrastructure.EntityFramework.Migrations
{
    [DbContext(typeof(AlgoTraderDbContext))]
    partial class AlgoTraderDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "market_type", new[] { "spot", "futures" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AlgoTrader.Core.Entites.Ticker", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("MarketType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("market_type");

                    b.Property<DateTime>("TickerStartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ticker_start_date");

                    b.HasKey("Id");

                    b.ToTable("tickers", (string)null);
                });

            modelBuilder.Entity("AlgoTrader.Core.Entites.Ticker", b =>
                {
                    b.OwnsOne("AlgoTrader.Core.ValueObjects.Symbol", "Symbol", b1 =>
                        {
                            b1.Property<Guid>("TickerId")
                                .HasColumnType("uuid");

                            b1.Property<string>("SymbolLeft")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("ticker_left");

                            b1.Property<string>("SymbolRight")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("ticker_right");

                            b1.HasKey("TickerId");

                            b1.ToTable("tickers");

                            b1.WithOwner()
                                .HasForeignKey("TickerId");
                        });

                    b.Navigation("Symbol")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
